test velocita': (2.4 turbo, 300 frame)
sr standard = 0.35 1.30

4 modelli, int2, ground truth: 104 +-14
cs, 6models : 105ms +-8
cs 4modelli : 115 +-9
cs, 12 modelli : 162+-15 (151-140)
cs, 18 modelli : 202+-21 (191-545)
cs, 1 modello : 84+-7 (77-174)

search ranges: (6 modelli,int2 nogt)
0.0 - 1.4 : 129+-12 (6modelli) 115 +-10 (4modelli)
0.0 - 1.3 : 131 +-11
0.0 - 1.2 : 133 +-10
0.0 - 1.1 : 131 +-10
0.0 - 1.0 : 130 +-11
0.0 - 0.9 : 150 +-45 (probabilmente xke patchwork cambia size molte volte)
0.0 - 0.8 : 118 +-8
0.0 - 0.7 : 116 +-9
0.0 - 0.6 : 114 +-9
0.0 - 0.3 : 98  +-7

0.1 - 1.0 : 128 +-10
0.2 - 1.0 : 127 +-10
0.3 - 1.0 : 117 +-10
0.4 - 1.0 : 110 +-8
0.5 - 1.0 : 102 +-7
0.6 - 1.0 : 98 +- 7

mAP con:
0.3 - 1.8 : 0.471766
0.3 - 1.7 : 0.471376
0.3 - 1.6 : 0.466440
0.3 - 1.5 : 0.476136
0.3 - 1.45: 0.473785
0.3 - 1.4 : 0.481312
0.3 - 1.39: 0.490142
0.3 - 1.38: 0.483495
0.3 - 1.37: 0.478389
0.3 - 1.35: 0.475075
0.3 - 1.3 : 0.474371
0.3 - 1.2 : 0.466968


w1 fissato a 1.39, w0:
0.5  : 0.451275
0.4  : 0.480361
0.38 : 0.485968
0.36 : 0.488174
0.35 : 0.489979
0.348: 0.489958
0.347: 0.490379
0.346: 0.490379
0.345: 0.490348
0.344: 0.485824 
0.34 : 0.486095
0.32 : 0.488709
0.3  : 0.490142
0.24 : 0.492232
0.2  : 0.492232
0.1  : 0.492232

test scale (int2, w0:9.346, w1:1.39, overlap 0.5)
0.9 : 0.454295
1.0 : 0.490379
1.1 : 0.488989
1.2 : 0.499855
1.3 : 0.492551
1.4 : 0.458347
1.5 : 0.505175
1.6 : 0.484626
1.7 : 0.448545
1.8 : 0.489315
1.85: 0.506308
1.9 : 0.517388
1.95: 0.490321
2.0 : 0.501330
2.2 : 0.452668
2.5 : 0.442774
3.0 : 0.462745
4.0 : 0.436185

int3:
0.9 : 0.476079
1.0 : 0.510613 
1.2 : 0.527700
1.4 : 0.501467
1.5 : 0.545608
1.7 : 0.516607
1.9 : 0.557161
2.5 : 

- con int2, s1.7, no sr, crasha 

[[[[
per i da 0 a interval popola con le scale esponenziali (da 1 a 1/2), a risoluzione doppia

da interval a 2interval sono a risoluzione normale e poi ancora dimezzate finche' si puo' 

dato un livello, se faccio livello+interval ottengo quello a risoluzione dimezzata
]]]]]

TODO:

- testare influenza speed single thread!
[x] linkare le detections di esempio
- mettere una frase sulla pyramid e scales nei primi capitoli
[x] rifare test 10x1.5 con nuovi w0 e w1
- mettere grafico p-r migliorer possibile


[x] provare con overlap a 0.6 o piu' (es al frame 15 da miglioramenti)

- test at different scales to find scale maximizing AP


[x] bug nello scalamento (i searchranges tipo al livello 0 restano uguali, ma invece la dimensione ce sto cercando e' molto piu' piccola!) [risolto credo]

[X] fare statistica dimensioni pedoni label

[x] analisi positivi missed (outputtare lista di frame in cui ci sono dei miss)

- idea di parti sostituibili (tanti modelli di teste, torsi, gambe), e magari le combinazioni hanno uno score del tipo, una testa di lato scora alto con delle gambe di lato, ma non con delle gambe frontali

- frame 76, threshold 2.8 buono per far vedere cosa cabia usando pyramid interval maggiore (bbox piu' precisi)
or 70, 74, 103

frames w ppl: 422, 4963, 892

Questi hanno implementato il tutto in matlab:
http://www.cs.berkeley.edu/~rbg/latent/index.html
(https://github.com/rbgirshick/voc-dpm)

libccv ha un'implementazione:
http://libccv.org/doc/doc-dpm/

stima delle pose:
http://ci2cv.net/software/deformable-parts-modelling-in-opencv/

fastHOG:
http://www.robots.ox.ac.uk/~lav/Papers/prisacariu_reid_tr2310_09/prisacariu_reid_tr2310_09.html
(usa nvidia cuda per hog detection piu' rapida, source code avialable)

HOG using SSE instructions:
https://github.com/ivanaslamov/HoG_SSE

ffld: fast hog detection  in c++:
http://charles.dubout.ch/en/coding.html

//implementazione piu' rapida di deformable parts model con branch and bound
http://cvn.ecp.fr/personnel/iasonas/dpms.html

//Vari link utili di machine learning per computer vision:
http://rogerioferis.com/VisualRecognitionAndSearch2014/Resources.html 

Convolutional network e' come usare modello a parti perche' i livelli piu' bassi identificano parti, mentre approcci vecchi matchano il tutto quindi vanno trainati con tante angolazioni, luci, etc. (https://www.youtube.com/watch?v=clgMTk5V2Sk minuto 4)

conversione octave:
load ./models/person_final2007.mat
convertmodel(model,"./models/person_final2007.txt")

30hz dpm:
http://vision.cs.illinois.edu/ftvq/

OPTICAL FLOW:

https://www.youtube.com/results?search_query=realtime+optical+flow

http://perso.ensta-paristech.fr/~garrigues/video_extruder.html


==========================================
Alox:

il training anche di oggetti diversi sarebbe utile, per esempio, gambe di cavallo possono sembrare gambe di umano, ma se vedi che c'e' un cavallo con una buona certezza, quello e' parte di un cavallo, e non un umano

Applicazione struttura occhio umano. A parte la fovea, il resto dell'occhio vede soprattutto in bianco e nero (e' anche piu' sensibile a basse luminosita'), ed ha una frequenza temporale maggiore, e maggiore sensibilita' al movimento, 
poi la fovea va a guardare nel dettaglio con risoluzione maggiore e colori

Anche informazione profondita' e' importante posso stimare la dimensione, un umano non puo' essere alto 5 metri

Problema di scelta della dimensione della finestra, va risolto. 

==========================================

ICF features

prima provare con HOG di openCV

(se l'include non basta forse openCV va aggiunto in Dummy/src/Cmake)


RUN:
/opt/gold...

~/.config/gold/session.ini (per selezionare sequenza da usare)
........./gold/INI/configdell'app

eclipse cero progetto,
nome cartella src
poi
import->existing prog->prendo cartella build

ccmake -G "Eclipse......" ../src
NativeRel
