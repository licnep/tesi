
frames w ppl: 422, 4963

Questi hanno implementato il tutto in matlab:
http://www.cs.berkeley.edu/~rbg/latent/index.html
(https://github.com/rbgirshick/voc-dpm)

libccv ha un'implementazione:
http://libccv.org/doc/doc-dpm/

stima delle pose:
http://ci2cv.net/software/deformable-parts-modelling-in-opencv/

fastHOG:
http://www.robots.ox.ac.uk/~lav/Papers/prisacariu_reid_tr2310_09/prisacariu_reid_tr2310_09.html
(usa nvidia cuda per hog detection piu' rapida, source code avialable)

HOG using SSE instructions:
https://github.com/ivanaslamov/HoG_SSE

ffld: fast hog detection  in c++:
http://charles.dubout.ch/en/coding.html

//implementazione piu' rapida di deformable parts model con branch and bound
http://cvn.ecp.fr/personnel/iasonas/dpms.html

//Vari link utili di machine learning per computer vision:
http://rogerioferis.com/VisualRecognitionAndSearch2014/Resources.html 

Convolutional network e' come usare modello a parti perche' i livelli piu' bassi identificano parti, mentre approcci vecchi matchano il tutto quindi vanno trainati con tante angolazioni, luci, etc. (https://www.youtube.com/watch?v=clgMTk5V2Sk minuto 4)

conversione octave:
load ./models/person_final2007.mat
convertmodel(model,"./models/person_final2007.txt")

==========================================
Alox:

il training anche di oggetti diversi sarebbe utile, per esempio, gambe di cavallo possono sembrare gambe di umano, ma se vedi che c'e' un cavallo con una buona certezza, quello e' parte di un cavallo, e non un umano

Applicazione struttura occhio umano. A parte la fovea, il resto dell'occhio vede soprattutto in bianco e nero (e' anche piu' sensibile a basse luminosita'), ed ha una frequenza temporale maggiore, e maggiore sensibilita' al movimento, 
poi la fovea va a guardare nel dettaglio con risoluzione maggiore e colori

Anche informazione profondita' e' importante posso stimare la dimensione, un umano non puo' essere alto 5 metri :P

Problema di scelta della dimensione della finestra, va risolto. 

==========================================

ICF features

prima provare con HOG di openCV

(se l'include non basta forse openCV va aggiunto in Dummy/src/Cmake)


RUN:
/opt/gold...

~/.config/gold/session.ini (per selezionare sequenza da usare)
........./gold/INI/configdell'app

eclipse cero progetto,
nome cartella src
poi
import->existing prog->prendo cartella build

ccmake -G "Eclipse......" ../src
NativeRel
